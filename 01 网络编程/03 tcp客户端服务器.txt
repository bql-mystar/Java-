TCP协议：传输控制协议------是一种面向连接的可靠的、基于字节流的传输通信协议
TCP通信需要经过  创建连接、数据传输、终止连接   三个步骤
TCP通信模型中，在通信开始之前，一定要先建立相关的链接，才能发送数据，蕾仕于生活中的’打电话‘

udp通信模型
udp通信模型中，在通信开始之前，不需要建立相关的链接，类似于生活中的’写信‘
udp一大特点：不安全（数据有可能丢）


TCP特点
1、面向连接
通信双方必须先建立连接才能进行数据的传输，双方都必须为该连接分配的必要的系统内核资源，以管理连接的状态和连接上的传输
双方间的数据传输都可以通过这一个连接进行
完成数据交换后，双方必须断开此连接，以释放系统资源
这种连接是一对一的，因此TCP不适用于广播的应用程序，基于广播的应用程序请使用UDP

2、可靠传输
1）TCP采用发送应答机制
TCP发送的每个报文段都必须得到接收方的应答才可以认为这个TCP报文件传输成功

2）超时重传
发送端发出一个报文段之后就启动定时器，如果在定时时间内没有收到应答就重新发送这个报文段，
TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。
然后接收端实体对已成功的包发回一个相应的确认（ACK）；如果发送端实体在合理的往返时延（RTT）
内未收到确认，那么对应的数据包被假设为已丢失，将会进行重传

3）错误校验
TCP用一个校验和函数来验证数据是否有错误；在发送和接收时都要计算校验和。

4）流量控制和阻塞管理
流量控制用来避免主机发送得过快而使接收方来不及完全收下

TCP和UDP的不同点
面向连接（确认有创建三方交握，连接已创建才作传输）
有序数据传输
重发丢失的数据包
舍弃重复的数据包
无差错的数据传输
阻塞/流量控制



TCP相对UDP更稳定，各有各的应用场景

TCP严格区分客户端和服务器
所谓的服务器端：就是提供服务的一方
而客户端：就是需要被服务的一方


TCP客户端构建流程
from socket import *
# 创建socket
tcp_client_socket = socket(AF_INET,SOCK_STRAM)
# 目的信息
server_ip = input('请输入服务器ip:')
server_port = int(input('请输入服务器port：'))
#连接服务器
tcp_client_socket.connect((server_ip,server_port))
# 提示用户输入数据
send_data = input('请输入要发送的数据：')
tcp_client_socket.send(send_data.encode('gbk'))
#接收对方发送过来的数据，最大接收1024个字节
recvData = tcp_client_socket.recv(1024)
print('接收到的数据为：',recvData.decode('gbk'))
# 关闭套接字
tcp_client_sicket.close()




tcp服务器
在程序中，如果想要完成一个tcp服务器的功能，需要的流程如下：
1、socket创建一个套接字
2、bind绑定ip和port
3、listen使套接字变为可以被动链接
4、accept等待客户端的链接
5、recv/send接收发送数据


一个简单的tcp服务器如下：

from socket import *
# 创建socket
tcp_server_socket = socket(AF_INET,SOCK_STREAM)
# 本地信息
address = ('',7788)
#绑定
tcp_server_socket.bind(address)
# 使用socket创建套接字默认属性是主动的，使用listen将其变为被动，这样就可以接收别人的链接了
tcp_server_socket.listen(128)
# 如果有新的客户端来链接服务器，那么就产生一个新的套接字专门为这个客户端服务
# client_socket用来为这个客户端服务
# tcp_server_socket就可以省下来专门等待其他新客户端的链接
client_socket,clientAddr = tcp_server_socket.accept() 	#注意：accept返回的是一个元组
# 接收对方发送来的数据
recv_data = client_sock，recvet.recv(1024)	# 接收1024个字节
print('接收到的数据为：'recv_data.decode('gbk'))
# 发送一些数据到客户端
client_socket.send('thank you!'.encode('gbk'))
# 关闭为这个客户端服务的套接字，只要关闭了，就意味着不能在为这个客户端服务了，如果还需要服务，只需要再次开启
client_socket.close()
tcp_server_socket.close()


tcp_server_socket用于监听套接字，负责等待有新的客户端进行连接
accept产生的新的套接字（即client_socket）用来为客户端服务
client_socket套接字：每当一个新的客户端接入，就会为其产生一个新的套接字


































