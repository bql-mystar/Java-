from socket import *
#1、创建udp套・接字
udp_socket = socket(AF_INET,SOCK_DGRAM)
#2、准备接收方的地址
#'192.168.1.103'表示目的ip地址
#8080表示目的端口
dest_addr = （'192.168.1.103',8080）   #注意是元组，ip是字符串，端口是数字
#3、从 键盘获取数据
send_data = input('请输入要发送的内容：')--------方法1
send_data = b'hahahha'    -------方法2	#在方法2引号前的b表示bit字节型
#以上问题解决方案有两种，1、在发送内容前（方法2）加一个b，以表示bit类型    2、在方法1 send_data后使用encode（'utf-8'）
#注意：以上方法1更通用
# 4、发送数据到指定的电脑上的制定的程序中
udp_socket.sendto(send_data.encode('utf-8'),dest_addr)
#5、关闭套接字
udp_socket.close()



在Linux中，sudo dhclient让别人给你一个ip，只要保证虚拟机网络模式为桥接模式，就可以使该系统与虚拟机在用一网段

绑定示例
from socket import *
#1、创建套接字
udp_socket = socket(AF_INET,SOCK_DGRAM)
#2、绑定本地的相关信息，如果一个网络程序不绑定，则系统会随机分配
local_addr = ('',7788)    #ip地址和端口号，ip一般不用写，表示本机的任何一个ip
udp_socket.bind(local_addr)
#3、等待接收方发送的数据
rec_data = udp_socket.recvfrom(1024)   #1024表示本次接收的最大字节数
#4、显示接收到的数据
print(rec_data[0].decode('gbk'))
#5、关闭套接字
udp_socket.close()


注意：windows发送的消息都是gbk编码的
注意：必须绑定自己电脑的ip和port，其他的不行


发送数据的流程：
1、创建套接字
2、发送数据
3、关闭

接收数据的流程
1、创建套接字
2、绑定本机的信息（ip和port）
3、接收数据
4、关闭


注意 ：同一端口不允许同一时刻被用两次

在使用recvfrom时候，如果没有收到信息，程序就会堵在那里，这种情况叫做堵塞


在网络通信中的词语（括号内为例子）
单工（收音机）：只能朝同一个方向走
半双工（对讲机）：可以双向的走，但是同一时刻只能朝一个方向走，比如：对讲机必须一个人说完了另一个人才能说
全双工（打电话）：同一时刻既可以收，又可以发

socket套接字的特性是是全双工
在使用全双工时需要使用多任务


在写注释的时候，如果#前面没有代码，那么在#后加上一个空格
                           如果#前面有代码，那么在#前面至少加上两个空格，且#后面加上一个空格


WINDOWS的解码方式是gbk
除windows的解码方式是utf-8
































