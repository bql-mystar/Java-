进程、线程、协程对比

简单总结：
1、进程是资源分配的单位
2、进程是操作系统调度的单位
3、进程切换需要的最远最大，效率很低
4、线程切换需要的资源一般，效率一般（当然了在不考虑GIL的情况下）
5、协程切换任务资源很小，效率高
6、多进程、多线程根据cpu核数不一样可能是并行的，但是协程是在一个线程中，所以是并发

在不考虑GIL锁的前提下，优先考虑协程，在考虑进程，最后考虑进程


----------以下几题是自己找到的关于这个方面的面试题

说说Python多线程9与多进程的区别
●1、多线程可以共享全局变量，多进程不能.
●2、多线程中，所有子线程的进程号相同;多进程中，不同的子进程进程号不同
●3、线程共享内存空间;进程的内存是独立的
●4、同一个进程的线程之间可以直接交流;两个进程想要通信，必须通过一个中间代理来实现
●5、创建新线程很简单;创建新进程需要对其父进程进行一次克隆
●6、一个线程可以控制和操作同一进程里的其他线程;但是进程只能操作子进程

两者最大的不同在于:在多进程中,同一个变量，各自有一份拷贝存在于每个进程中，互不影响;而多线程中，所有变量都由所有线程共享。



说说Python中迭代器和生成器的区别?
答: Python中生成器能做到迭代器能做的所有事，而且因为自动创建了__iter__()和__next__()方法，生成器显得特别简洁，而且生成器也是高效的，使用生成器表达式取代列表解析，同时节省内存。除了创建和保持程序状态的自动生成，当发生器终结时，还会自动跑出Stoplterration异常。
●列表、元组、字典、字符串都是可迭代对象
●数字、布尔值都是不可迭代的。



说说Python中xrange和range的区别?
答: range()和xrange()都是在循环中使用，输出结果一样。
●range()返回的是一 个list对象， 而xrange返回的是一个生成器对 象(xrange object)。
●xrange(）则不会直接生成一个list， 而是每次调用返回其中的一个值，内存空间使用极少。因而性能非常好，所以尽量用xrange吧。

在python3中没有xrange,只有range。 range和python2中的xrange()一样。






















