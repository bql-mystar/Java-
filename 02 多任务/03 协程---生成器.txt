生成器
利用迭代器，我们可以在每次迭代获取数据（通过__next__方法）时按照特定的规律进行生成。
但是我们在实现一个迭代器时，关于当前迭代到的状态需要我们自己记录，进而才能根据当前状态生成下一个数据。
为了达到更好的记录当前状态，并配合next()函数进行迭代使用，我们可以采用更简便的语法，即生成器(generator)。
生成器是一类特殊的迭代器。

创建生成器方法1（用的比较少）
要创建一个生成器，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()

L = [x*2 for x in range(10)]	# 这个为列表生成式，返回的值是一个列表
G = （x*2 for x in range（10））	# 这个的返回值是一个对象，这就是一个生成器


创建生成器方法2
generator非常强大，如果推算的算法比较复杂，用类似列表生成式的for循环无法实现的时候，话可以用函数来实现

以下方法通过迭代器实现：
class Fibonacci(object):
    def __init__(self,n):
        self.num = 0
        self.n = n
        self.a = 0
        self.b = 1

    def __iter__(self):
        return self

    def __next__(self):
        if self.num < self.n:
            result = self.a
            self.a, self.b = self.b, self.a+self.b
            self.num += 1
            return result
        raise StopIteration

hello = Fibonacci(10)
for i in hello:
    print(i)


以下方法通过生成器实现
def lib(n):
    current = 0
    um1, num2 = 0, 1
    while current < n:
        num = num1
        num1, num2 = num2, num1+num2
        current += 1
        yield  num
    return 'done'

for i in lib(10):
    print(i)

yield的作用:1、将yield后面的值传给一个变量（如:以上代码就是将num传给i），也可以理解为传递给调用next()函数的对象      2、将代码暂停在yield那里，当第一步实现完后，lib的代码不必重新开始，直接从上一次yield部分接着往下运行，直到下一次的yield

python书写规范：一般在逗号（，）或分号（：）后面要加一个空格

如果一个函数中有yield语句，那么这个就不再是函数，而是一个生成器的模板
如果在调用lib的时候，发现这个函数中有yield，那么此时，不再是调用函数，而是创建了一个生成器对象


总结
1、使用yield关键字的函数不再是函数，而是生成器。（使用yield的函数是生成器）
2、yield关键字有两点作用：
	一：保存当前运行状态(断电)，然后暂停执行，即将生成器(函数)挂起
	二：将yield关键字后面表达式的值作为返回值返回，此时可以理解为起到了return的作用
3、可以用next()函数让生成器从断点处继续执行，即唤醒生成器(函数)
4、python3中的生成器可以使用return返回最终运行的结果，而python2中的生成器不允许使用return返回一个返回值（即可以使用return从生成器中退出，但return后不能有任何表达式）



使用send唤醒（一般不要把send放在第一次，如果一定要用的话，那么就把send传入的值设为None）
我们除了可以使用next()函数来唤醒生成器继续执行外，还可以使用send()函数来唤醒执行。使用send()函数的一个好处是可以在唤醒的同时向断点处传入一个附加数据

拿以下代码举例
def lib(n):
    current = 0
    num1, num2 = 0, 1
    while current < n:
        num = num1
        num1, num2 = num2, num1+num2
        ret = yield  num
        print(ret)
        current += 1


obj = lib(5)
print(next(obj))
print(next(obj))
print(next(obj))
print(obj.send(None))
print(obj.send('hahaha'))

返回值依次为 0 None 1 None 1 None 2 hahaha 3

注意代码：ret = yield num
执行代码时，分为两次执行，第一次将yield后面的值传出去，第二次给ret传入一个值，但yield num已经将值出去了，所以此时赋给ret的值是None，而send的作用不仅可以得到yield返回的值，还可以将send后面的值传入给ret，使得ret有一个值
因此	obj.next() 等价于 obj.send(None)




迭代器、生成器都可以保存数据，但迭代器还可以实现多任务


协程特点：调用一个任务就像调用一个函数一样，调用的资源最少
进程调用的资源最多，进程次之，最少的是协程

使用yield实现多任务：
import time

def text_1():
    while True:
        print('---1---')
        time.sleep(1)
        yield

def text_2():
    while True:
        print('---2---')
        time.sleep(1)
        yield

def main():
    t1 = text_1()
    t2 = text_2()
    while True:
        next(t1)
        next(t2)


if __name__ == '__main__':
    main()


使用greenlet、gevent实现多任务

greenlet
为了更好的使用协程来完成多任务，python中的greenlet模块对其进行封装，从而使得切换任务更加简单
from greenlet import greenlet
import time

def text1():
    while True:
        print('---A---')
        gr2.switch()
        time.sleep(0.5)

def text2():
    while True:
        print('---B---')
        gr1.switch()
        time.sleep(0.5)

gr1 = greenlet(text1)
gr2 = greenlet(text2)

# 切换到gr1中运行
gr1.switch()



genent
greenlet已经实现了协程，但是这个还得人工切换，太麻烦了
python还有一个比greenlet更强大且能够自动切换任务的模块gevent

其原理是当一个greenlet遇到IO（指的是input output输入输出，比如网络、文件操作等）操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行

由于IO操作非常耗时，经常处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO

gevent使用
import gevent

def f(n):
    for i in range(n):
        print(gevent.getcurrent(),i)
        gevent.sleep(1)

g1 = gevent.spawn(f,5)
g2 = gevent.spawn(f,5)
g3 = gevent.spawn(f,5)
g1.join()
g2.join()
g3.join()



理论上：如果要用gevent操作，就要把所以的延时、堵塞（包含socket里的connect和accept操作）操作，全部要用gevent里面的，比如gevent.sleep()或者gevent.socket()等等
但如若有成千上万行代码都要重新修改的话就会出现代码的重置（即重写），故有以下方法解决用monkey.patch_all()

给程序打补丁
from gevent import monkey
import gevent
import random
import time

# 有耗时操作需要
monkey.patch_all()	    # 将程序中用到的耗时操作的代码，将由gevent中自己实现的模块
def coroutine_work(coroutine_name): 
    for i in range(10):
        print(coroutine_name,i)
        time.sleep(random.random())

gevent.joinall([
	gevent.spawn(coroutine_work,"work1"),
	gevent.spawn(coroutine_work,"work2")
])


只要添加上monkey.patch_all()系统就可以把所有的耗时操作的代码更改使用

使用gevent时，如若要写的join太多，可以使用gevent.joinall([g1,g2,g3...])
g1,g2,g3.....为创建的gevent.spawn创建的对象,有几个写几个即可









