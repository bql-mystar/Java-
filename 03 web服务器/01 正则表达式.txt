re模块操作
在python中需要通过正则表达式对字符串进行匹配的时候，可以使用一个模块，名字为re

---re模块的使用过程
# 导入re模块
import re
# 使用match方法进行匹配操作
result = re.match(正则表达式，要匹配的字符串)
# 如果上一步匹配到数据的话，可以使用group方法来提取数据

re模块示例（匹配以itcast开头的语句）
import re
result = re.match('itcast','itcast.cn')
result.group()



匹配单个字符
字符	功能
.（点）	匹配任意1个字符（除了\n），如果要让.可以匹配到\n的话，那么就要在匹配字符串后面再添加一个参数，该参数为re.S，那么这样.就包括了\n
[]	匹配[]中列举的字符
\d	匹配数字,即0~9
\D	匹配非数字，即不是数字
\s	匹配空白，即空格，tab键（\t）
\S	匹配非空白
\w	匹配单词字符，即a~z，A~Z，0-9，_（下划线）,甚至包括中文、日文更各种语言
\W	匹配非单词字符

[123456789]可以改写为[1-9]英文字母同理
但注意，中括号内的内容必须是连着的，如果断开了，就不能使用该方法
当然，也有方法解决，如[123789]可以改写成[1-37-9]



匹配多个字符
字符	功能
*	匹配前一个字符出现的0次或者无限次，即可有可无
+	匹配前一个字符出现1次或者无限次，即最少有一次
？	匹配前一个字符出现1次或者2次，即要么1次，要么没有
{m}	匹配前一个字符出现m次
{m,n}	匹配前一个字符出现从m到n次





注意：""""""三对双引号，在一个类下面就是给类说明，在函数下面就是给函数说明，如果不是函数，那么他就是个真正的字符串，但该字符串可以回车


匹配开头结尾
字符	功能
^	匹配字符串开头
$	匹配字符串结尾

python中的match默认判断开头，换种语言可能不见得


如果在正则表达式中需要用到某些普通的字符，比如.(点)，？（问好），+（加号）等，仅仅需要在他们前面添加一个\（反斜杠）进行转义



匹配分组
字符	功能
| （竖杠）	匹配左右任意一个表达式
（ab）	1、将括号中字符作为一个分组	2、如果想单独取出某一部分数据来，那么就在那一部分数据两边加上小括号，那么正则表达式就会把括号内的值给取出来
\num	引用分组num匹配到的字符串
（?P<name>） 分组其别名
(?P=name)  引用别名为name分组匹配到的字符串





使用 |（竖杠）进行分组，此时可以把竖杠前面和后面的内容进行分组，导致范围太广出现问题，
为了解决这一问题，再需要将分组的内容括号起来，比如(163 | 126)此时就把163和126分组了，也不影响其他内容

注意：
ret = re.match(r'([a-zA-Z0-9_]{4,20})@(163)\.com','1274326376@163.com')
如果是ret.group()的话，返回的是匹配的所以内容
如果是ret.group(1)的话，返回的是第一个括号内的内容，如上就是1274326376
如果是ret.group(2)的话，返回的值就是第二个括号的内容，如上就是163
如果是ret.group(3)的话，就会报错，因为正则表达式中没有第三个括号

\num的作用如下
html_content = <body><h1></h1>hahaha<body>
re.match(r'<(\w*)><(\w*)>.*</\2></\1>',html_content).group()
返回的值就是html_content的内容
因此\num就是匹配正则表达式中括号内分组的内容，第一个括号就\1，第二个就\2，因此这个可以用来确保\1部分匹配的内容会和对一个括号内的内容相同

以上方法随着括号越来越多，就要开始数第几个括号，因此有了给分组命名（了解就行，不重要）
html_content = <body><h1></h1>hahaha<body>
re.match(r'<(?P<p1>\w*)><(?P<p2>\w*)>.*</(?P=p2)></(?P=p1)>',html_content).group()



re模块的高级用法

search
需求：匹配出文章阅读的最大次数
import re
ret = re.search(r'\d+','阅读次数为 9999')
ret.group()

match会从头匹配，search不会从头匹配，只要找到一个符合要求的数据，就会返回了
search只会匹配到第一个数据

findall
需求：统计出python、c、c++相应文章的阅读的次数
import re
ret = re.findall(r'\d+','python = 9999, c = 7890, c++ = 12345')
print(ret)

findall返回的是一个列表


search需要group，而findall不用


sub将匹配到的数据进行替换
需求：将匹配到的阅读次数加1
方法1：
import re
ret = re.sub(r'\d+','998','python = 997')
print(ret)


方法2：
import re

def add(temp):
	strNum = temp.group()
	num = int(strNum) + 1
	return str(num)

ret = re.sub(r'\d+',add,'python = 997')



sub的作用即：用正则表达式在第三个参数内得到匹配的内容，并将该内容替换成第二个参数的内容
sub可以将第三个参数内所有符合正则表达式的都替换了，而不仅仅是第一个
sub还支持一个函数的调用（如以上方法2）

在方法2中：
正则表达式先将第三个参数符合条件的内容取出，并将其传入给add函数，返回一个值后替换给第三个参数内指定的内容
倘若第三个参数是'python=999，c=111'，那么返回值是'python=1000,c=112',该方法会对内容一一对应



split根据匹配进行切割字符串，并返回一个列表
需求：切割字符串'info:xiaoZhang 33 shandong'
import re
ret = re.split(r':| ','info:xiaoZhang 33 shandong')
print(ret)




贪婪与非贪婪模式
所有的正则表达式（不仅仅是python）默认都是贪婪模式

python里数量词默认是贪婪的（在少数语言里也可能默认是非贪婪的），总是尝试匹配尽可能多的字符；
在'*' , '?' , '+' ,'{m,n}' 后面加上问好，使贪婪变成非贪婪

s = 'This is a number 234-235-22-423'
ret = re.match('.+(\d+-\d+-\d+-\d+)',s)
ret.group(1)
以上返回值为  4-235-23-423
ret = re.match('.+?(\d+-\d+-\d+-\d+)',s)
ret.group(1)
以上返回值为   234-235-22-243


正则表达式中模式中使用到通配字，那它在从左往右的顺序求值时，会尽量"抓取"满足匹配最长字符串，
在上面的例子里面，".+"会从字符串的起始处抓取满足模式的最长字符，其中包括我们想得到的第一个整型字段中的大部分，
"\d+"只需一位字符就可以匹配，所以它匹配了数字"4"，而".+"则匹配了从字符串起始到这个第一位数字4之前所有字符

解决方式：非贪婪操作符"?"，这个操作符可以用在"*", "+" ,"?" 的后面，要求正则表达式匹配的越少越好

？（问号）在哪个符号（.+*三选一）后面，那么问号就限制那个符号的贪婪模式，使其变为非贪婪模式


注意，要在满足别的条件的情况下，才能最少匹配
如下：
a = 'aaa2345ddd'
ret = re.match(r'aaa(\d+?)ddd',a)
ret.group(1)

虽然以上括号内满足了非贪婪模式，但由于其他部分无法匹配数字，故返回值依然是2345



r的作用
与大多数编程语言相同，正则表达式里使用"\"作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符"\"，那么使用编程语言表示的正则表达式里将需要4个反斜杠"\\"：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。


Python里的原生字符串很好地解决了这个问题，有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。

因此，在写正则表达式时，在其引号前加个r取消转义，以避免麻烦

注意：^的另一个用法
只要是”^”这个字符是在中括号”[]”中被使用的话就是表示字符类的否定，如果不是的话就是表示限定开头。我这里说的是直接在”[]”中使用，不包括嵌套使用。 
其实也就是说”[]”代表的是一个字符集，”^”只有在字符集中才是反向字符集的意思。

比如：
[^a]表示“匹配除了a的任意字符”。
[^a-zA-Z0-9]表示“找到一个非字母也非数字的字符”。
[\^abc]表示“找到一个插入符或者a或者b或者c”。


