程序开发时，很难将所有的特殊情况都处理的面面俱到，通过异常捕获可以针对突发事件做集中处理，从而保证程序的稳健性和健壮性

简单的捕获异常语法
try：
	尝试执行的代码
except：
	出现错误的处理


错误类型捕获
try：
	#尝试执行的代码
	pass
except 错误类型1：
	#针对错误类型1，对应的代码处理
	pass
except （错误类型2，错误类型3）：
	#针对错误类型2和3，对应的代码处理
	pass
except Exception as result：
	print（‘位置错误%s’% result）

当python解释器抛出异常后，最后一行错误信息的第一个单词，就是错误类型



捕获未知错误
except Exception as result:       ======>result为变量名，可以自己随意修改
	print('未知错误 %s' % result)



异常捕获完整语法
try：
	#尝试执行的代码
	pass
except 错误类型1：
	#针对错误类型1，对应的处理代码
	pass
except （错误类型2，错误类型3）：
	#针对错误类型2和3，对应的代码处理
	pass
except Exception as result：
	#打印错误信息
	print（result）
else：
	#没有异常才会执行的代码
	pass
finally：
	#无论是否异常，都会执行的代码
	print（‘无论是否异常都会执行的代码’）


异常的传递
异常的传递---当函数/方法执行出现异常，会将异常传递给函数/方法的调用一方
如果传递到主程序，仍然没有异常处理，程序才会终止

利用异常的传递性，在主程序捕获异常



抛出raise异常
在开发中，除了代码执行错误python解释器会抛出异常
还可以根据应用程序特有的业务需求主动抛出异常
（如：提示用户输入密码，如果长度少于8，抛出异常）


python中提供了一个Exception异常类
在开发时，如果满足特定业务需求时，希望抛出异常，可以：
	1、创建一个Exception的对象
	2、使用  raise  关键字抛出异常对象

创建一个异常类
	ex=Exception（‘密码长度不够’）
主动抛出异常类
	raise ex
注：以上的ex可以自己随意命名，即为异常问题，括号内输入内容几位错误原因或注释
