文本文件
	可以使用文本编辑软件查看
	本质上还是二进制文件

二进制文件
	保存的内容不是直接给人阅读的，而是提供给其他软件使用的
	例如：图片文件、音频文件、视频文件等等
	二进制文件不能使用文本编辑软件查看

操作文件的套路
1、打开文件
2、读、写文件
	读：将文件内容读入存储
	写：将内存内容写入文件
3、关闭文件

read方法--读取文件
#1、打开--文件名需要注意大小写
file=open('filename')
#2、读取
text=file.read()
print(text)
#3、关闭
file.close()


文件指针（科普）
文件指针  标记 从哪个位置开始读取数据
当一次打开文件时，通常文件指针会指向文件的开始位置
当执行read方法后，文件的指针会移动到  读取内容的末尾
	默认情况下会移动到 文件末尾

思考：如果文件执行了一次read方法，读取了所有内容，那么再次调用read方法，还能够获得到内容吗？
答案：不能，第一次读取后，文件指针移动到了文件末尾，再次调用不会读取到任何内容


打开文件的方式
open 函数默认以  只读方式   打开，并且返回文件对象
语法如下
f=open（'文件名'，'访问方式'）

访问方式	    说明
r	    以只读方式打开文件。文件的指针将会放在文件的开头，这是默认模式。如果文件不存在，抛出异常
w	    以只写方式打开文件，如果文件存在会被覆盖。如果文件不存在，创建新文件
a	    以追加方式打开文件。如果文件存在，文件指针将会放在文件的末尾。如果不存在，创建新文件进行写入
r+	    以读写方式打开文件，文件的指针将会放在文件的开头。如果文件不存在，抛出异常
w+	    以读写方式打开文件，如果文件存在会被覆盖，如果文件不存在，创建新文件
a+	    以读写方式打开文件，如果该文件该文件按已存在，文件指针将会放在文件的结尾，如果文件不存在，创建新文件进行写入


提示：
频繁的移动文件指针，会影响文件的读写效率，开发中更多的时候会以 只读、只写 的方式来操作文件



按行读取文件内容

readline方法可以一次读取一行内容，方法执行后，会把文件指针移动到下一行，准备再次读取


小文件读取
打开一个已有文件，读取完整内容，并写入到另一个文件
大文件复制
打开一个已有的文件，逐行读取内容，并顺序写入到另一个文件


文件/目录的常用管理操作
在终端/文件浏览器中可以执行常规的文件/目录管理操作
例如：创建、重命名、修改、改变路径、查看目录内容。。。
在python中，如果希望通过程序实现上述功能，需要导入os模块

文件操作 
方法名	说明		实例
rename	重命名文件	os.rename（源文件名，目标文件名）
remove	删除文件		os.remove（文件名）


目录操作

方法名	说明		实例
listdir	目录列表		os.listdir(目录名)
mkdir	创建目录		os.mkdir(目录名)
rmdir	删除目录		os.rmdir（目录名）
getcwd	获取当前目录	os.getcwd()
chdir	修改工作目录	os.chdir(目录名)
path.isdir	判断是否是文件	os.path.isdir(文件路径)

提示：文件或者目录操作都支持 相对路径和绝对路径



文本文件的编码格式（科普）

文本文件存储的内容基于  字符编码  的文件  ，常用的字符编码有ASCII编码，Unicode编码等
python2.x默认使用ascii编码
python3.x默认使用utf-8编码



在utf-8中，大多数汉字会使用3个字节表示
utf-8是unicode编码的一种编码格式

python2.x中如何使用中文
在python2.x文件的第一行增加以下代码，解释器会以utf-8编码来处理python文件
# *-* coding：utf8 *-*	这方式是官方推荐使用的

hello_str=u'hello世界'	#引号前面的u告诉解释器这是一个utf8编码格式的字符串
	




注意：文件操作的两种方式
方法一：
f = open（'xxx'）
try:
	f.write('xxx')/read()
except:
	f,close()

方法二：
with  open('xxx') as f:
	f.read()/write()


以上两种方法作用相同，即当读/写出现异常时，关闭文件
而第二种方法不用写f.close()
使用with的前提是保证该文件可以打开，因此with方法一般与w/wb连用


rb/wb是以二进制读/写文件，使用二进制读写文件时，到时候发送文件就不需要encode来发送文件了，可以直接发送














